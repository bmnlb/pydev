#!/usr/bin/env python3
'''
mytime - Version 3.1
--------------------
Better design resulting in better
performance and readability.
Clearer goals.

Changelog;
3.1 - Changed to 12-hour
    - fixed bugs displaying mins/secs
      below '10'.
3.2 - Added exception handling
      and some comments.
    - Misc.

Powered by Pygame.
'''
from os import path as ospath
from sys import exit
from subprocess import getoutput
import pygame,time

def strSysTime():
    currentT = time.localtime()
    timeString = ''
    # Use 12-hour format and fix mins and secs.
    if currentT.tm_hour > 12:
        timeString += str(currentT.tm_hour - 12)
    elif currentT.tm_hour == 0:
        timeString += '12'
    else:
        timeString += str(currentT.tm_hour)
    if currentT.tm_min < 10:
        timeString += ':0'+str(currentT.tm_min)
    else:
        timeString += ':'+str(currentT.tm_min)
    if currentT.tm_sec < 10:
        timeString += ':0'+str(currentT.tm_sec)
    else:
        timeString += ':'+str(currentT.tm_sec)
    return timeString

# Pygame - init and create some glob vars. #
pygame.init()
pygame.display.set_caption('mytime v3.2')
#using subprocess.getoutput() - this is my
#solution so the script can be called from
#the cmdline with any working directory. lol?
path = getoutput('which mytime3')
path = path.strip('mytime3')
path_font = path + 'resources/fonts/Pixeltype.ttf'
font = pygame.font.Font(path_font,200)
#set window size according to this blank string rendering.
blankSurf = font.render('_______________',False,(0,0,0),(0,0,0))
windowSurface = pygame.display.set_mode((font.size(strSysTime()+' ')))
appclock = pygame.time.Clock()
currentTime = ''

# Main loop #
bRun = 1
try:
    while bRun:
        # Event loop - get queue and check for quit. #
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                bRun = 0
                break
        #Call strSysTime(), render, clear, blit, update.
        currentTime = strSysTime()
        timeSurf = font.render(currentTime,False,(255,255,255),(0,0,0)).convert()
        windowSurface.blit(blankSurf,(0,0))
        windowSurface.blit(timeSurf,(0,0))
        pygame.display.update()
        appclock.tick(3) # update 3x/sec...3fps
#i did exceptions this way to kinda test if i was understanding them correctly...
#getting there!
except BaseException:
    if KeyboardInterrupt:
        pygame.quit()
        exit()
    else:
        pygame.quit()
        exit()

pygame.quit()
